<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"
				xmlns:s="library://ns.adobe.com/flex/spark"
				width="350" height="244" horizontalScrollPolicy="off" layout="absolute"
				title="ニコニコ動画へログイン" verticalScrollPolicy="off">
    <mx:Metadata>
        [Event("onFirstTimeLoginSuccess")]
    </mx:Metadata>
	
	<mx:Script>
		<![CDATA[
			import org.mineap.util.config.ConfUtil;
			
			/**
			 * 
			 * @param event
			 */
			protected function checkbox1_changeHandler(event:Event):void
			{
				var isShow:Boolean = (event.currentTarget as CheckBox).selected;
				textInput_password.displayAsPassword = !isShow;
			}
			
			
			protected function textInput_userName_changeHandler(event:Event):void
			{
				userName = (event.currentTarget as TextInput).text;
			}
			
			protected function textInput_password_changeHandler(event:Event):void
			{
				password = (event.currentTarget as TextInput).text;
			}
			
			protected function textInput_userName_creationCompleteHandler(event:FlexEvent):void
			{
				var userName:String = ConfigManager.getInstance().getItem("userName");
				if (userName != null && userName.length > 0)
				{
					this.userName = userName;
					(event.currentTarget as TextInput).text = userName;
				}
				else
				{
					var storedValue:ByteArray = EncryptedLocalStore.getItem("userName");
					if(storedValue != null){
						userName = storedValue.readUTFBytes(storedValue.length);
						this.userName = userName;
						(event.currentTarget as TextInput).text = userName;
					}
				}
				
			}
			
			protected function textInput_password_creationCompleteHandler(event:FlexEvent):void
			{
				try
				{
				
					var storedValue:ByteArray = EncryptedLocalStore.getItem("password");
					if(storedValue != null){
						var pass:String = storedValue.readUTFBytes(storedValue.length);
						
						if (pass != null && pass.length > 0)
						{
							this.password = pass;
							(event.currentTarget as TextInput).text = pass;
						}
					}
				
				}
				catch(error:Error)
				{
					trace(error.getStackTrace());
					logManager.addLog("パスワードの読み込みに失敗:" + error + ":" + error.getStackTrace());
					logManager.addLog("予期せぬ問題により、パスワードの読み込みに失敗しました。パスワードの保存オプションをオフにしました。");
					
					Alert.show("パスワードの読み込みに失敗しました。\n\n" + error, Message.ERROR);
					
					try
					{
						EncryptedLocalStore.reset();
					}catch(error:Error)
					{
						trace(error);
					}
					isStorePass = false;
					isAutoLogin = false;
					
//					saveStore();
				}
				
			}
			
			protected function checkbox_autoLogin_creationCompleteHandler(event:FlexEvent):void
			{
				
				if (!EncryptedLocalStore.isSupported)
				{
					(event.currentTarget as CheckBox).enabled = false;
					(event.currentTarget as CheckBox).toolTip = "この環境ではパスワードを保存できないため、自動的にログインすることができません。";
					return;
				}
				
				var isAutoLoginStr:String = ConfigManager.getInstance().getItem("isAutoLogin");
				var isAutoLogin:Boolean = ConfUtil.parseBoolean(isAutoLoginStr);
				
				if (isAutoLoginStr != null)
				{
					this.isAutoLogin = isAutoLogin;
					(event.currentTarget as CheckBox).selected = isAutoLogin;
				}
				
			}
			
			protected function checkBox_storePassword_creationCompleteHandler(event:FlexEvent):void
			{
				if (!EncryptedLocalStore.isSupported)
				{
					(event.currentTarget as CheckBox).enabled = false;
					(event.currentTarget as CheckBox).toolTip = "この環境ではパスワードを安全に保存することができません。";
					return;
				}
				
				var storeNameAndPassStr:String = ConfigManager.getInstance().getItem("storeNameAndPass");
				var storeNameAndPass:Boolean = ConfUtil.parseBoolean(storeNameAndPassStr);
				
				var storePassStr:String = ConfigManager.getInstance().getItem("storePass");
				var storePass:Boolean = ConfUtil.parseBoolean(storePassStr);
				
				if (storePassStr == null && storeNameAndPass == true)
				{
					this.isStorePass = true;
					(event.currentTarget as CheckBox).selected = true;
				}
				else
				{
					if (storePass)
					{
						this.isStorePass = true;
						(event.currentTarget as CheckBox).selected = true;
					}
					else
					{
						this.isStorePass = false;
						(event.currentTarget as CheckBox).selected = false;
					}
				}
			}
			
			protected function checkBox_storeUserName_creationCompleteHandler(event:FlexEvent):void
			{
				var storeNameAndPassStr:String = ConfigManager.getInstance().getItem("storeNameAndPass");
				var storeNameAndPass:Boolean = ConfUtil.parseBoolean(storeNameAndPassStr);
				
				var storeNameStr:String = ConfigManager.getInstance().getItem("storeName");
				var storeName:Boolean = ConfUtil.parseBoolean(storeNameStr);
				
				if (storeNameStr == null && storeNameAndPass == true)
				{
					this.isStoreName = true;
					(event.currentTarget as CheckBox).selected = true;
				}
				else
				{
					if (storeName)
					{
						this.isStoreName = true;
						(event.currentTarget as CheckBox).selected = true;
					}
					else
					{
						this.isStoreName = false;
						(event.currentTarget as CheckBox).selected = false;
					}
				}
			}
			
			protected function loginButton_creationCompleteHandler(event:FlexEvent):void
			{
				// ちょっとwaitしてからログイン処理。
				// なんかよくわからないけどcompleteHandlerの処理でやるとHTTPのリクエストがちゃんと飛ばない。(AIR側の初期化処理が終わってない？）
				var timer:Timer = new Timer(1000, 1);
				timer.addEventListener(TimerEvent.TIMER_COMPLETE, showLoginDialogComplete);
				timer.start();
				
			}
			
			protected function showLoginDialogComplete(event:TimerEvent):void
			{
				
				validateNow();
				
				trace(event);
				execAutoLogin();
				
				validateNow();
			}
			
		]]>
	</mx:Script>

    
    <mx:Script source="org/mineap/nndd/view/LoginDialog.as"/>
    
	<s:VGroup left="5" right="5" top="5" bottom="5">
	    <mx:Label left="2" right="2" top="4" width="100%" fontWeight="bold"
				  text="メールアドレスとパスワードを入力してログインしてください。" textAlign="left"/>
	    
		<s:VGroup width="90%" horizontalAlign="right">
		
			<s:HGroup right="10" top="32" horizontalAlign="center">
				<mx:Label text="メールアドレス" />
				<mx:TextInput id="textInput_userName" 
							  creationComplete="textInput_userName_creationCompleteHandler(event)" 
							  change="textInput_userName_changeHandler(event)" 
							  enter="enterHandler(event)" width="183"/>
			</s:HGroup>
			
			<s:HGroup top="62" right="10">
				<mx:Label text="パスワード" />
				<mx:TextInput id="textInput_password" 
							  creationComplete="textInput_password_creationCompleteHandler(event)" 
							  change="textInput_password_changeHandler(event)" 
							  displayAsPassword="true" 
							  enter="enterHandler(event)" width="183"/>
			</s:HGroup>
			
		</s:VGroup>
		
		<mx:CheckBox label="メールアドレスを記憶する" id="checkBox_storeUserName" 
					 creationComplete="checkBox_storeUserName_creationCompleteHandler(event)"/>
		<mx:CheckBox label="パスワードを保存する" id="checkBox_storePassword" 
					 creationComplete="checkBox_storePassword_creationCompleteHandler(event)"/>
		<mx:CheckBox label="次回以降自動的にログインする" id="checkbox_autoLogin" 
					 creationComplete="checkbox_autoLogin_creationCompleteHandler(event)"/>
		
		<s:HGroup right="10" bottom="10" width="100%" horizontalAlign="right" verticalAlign="bottom">
			<mx:Button label="今はログインしない" click="notLogin()" id="noLoginButton" keyUp="buttonKeyUp(event)" />
			<mx:Button label="ログイン" click="login()" id="loginButton" keyUp="buttonKeyUp(event)" 
					   creationComplete="loginButton_creationCompleteHandler(event)" />
		</s:HGroup>
	
	</s:VGroup>
	
	
</mx:TitleWindow>